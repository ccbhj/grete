package dsl

// Code generated by peg -switch -inline -strict -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleDefinitions
	ruleDefinition
	ruleDefinitionBody
	ruleOption
	ruleOptionList
	ruleExpression
	ruleOperator
	ruleOperand
	ruleSpacing
	ruleIdentifier
	ruleLiteral
	ruleBoolLiteral
	ruleFloatLiteral
	ruleExponent
	ruleIntegerLiteral
	ruleDecimalNumeral
	ruleStringLiteral
	ruleStringChar
	ruleLetterOrDigit
	ruleLetter
	ruleDigits
	ruleEscape
	ruleKeyword
	ruleDefType
	ruleLPAR
	ruleRPAR
	ruleLBRK
	ruleRBRK
	ruleEOT
)

var rul3s = [...]string{
	"Unknown",
	"Definitions",
	"Definition",
	"DefinitionBody",
	"Option",
	"OptionList",
	"Expression",
	"Operator",
	"Operand",
	"Spacing",
	"Identifier",
	"Literal",
	"BoolLiteral",
	"FloatLiteral",
	"Exponent",
	"IntegerLiteral",
	"DecimalNumeral",
	"StringLiteral",
	"StringChar",
	"LetterOrDigit",
	"Letter",
	"Digits",
	"Escape",
	"Keyword",
	"DefType",
	"LPAR",
	"RPAR",
	"LBRK",
	"RBRK",
	"EOT",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type PRD struct {
	Buffer string
	buffer []rune
	rules  [30]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *PRD) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *PRD) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *PRD
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *PRD) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *PRD) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *PRD) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*PRD) error {
	return func(p *PRD) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*PRD) error {
	return func(p *PRD) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *PRD) Init(options ...func(*PRD) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Definitions <- <(Definition+ EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleDefinition]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleDefinition]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4 := position
					{
						position5, tokenIndex5 := position, tokenIndex
						if !matchDot() {
							goto l5
						}
						goto l0
					l5:
						position, tokenIndex = position5, tokenIndex5
					}
					add(ruleEOT, position4)
				}
				add(ruleDefinitions, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Definition <- <((LPAR DefType Identifier? OptionList? DefinitionBody RPAR) / (LBRK DefType Identifier? OptionList? DefinitionBody RBRK))> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleLPAR]() {
						goto l9
					}
					if !_rules[ruleDefType]() {
						goto l9
					}
					{
						position10, tokenIndex10 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l10
						}
						goto l11
					l10:
						position, tokenIndex = position10, tokenIndex10
					}
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !_rules[ruleOptionList]() {
							goto l12
						}
						goto l13
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
				l13:
					if !_rules[ruleDefinitionBody]() {
						goto l9
					}
					if !_rules[ruleRPAR]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleLBRK]() {
						goto l6
					}
					if !_rules[ruleDefType]() {
						goto l6
					}
					{
						position14, tokenIndex14 := position, tokenIndex
						if !_rules[ruleIdentifier]() {
							goto l14
						}
						goto l15
					l14:
						position, tokenIndex = position14, tokenIndex14
					}
				l15:
					{
						position16, tokenIndex16 := position, tokenIndex
						if !_rules[ruleOptionList]() {
							goto l16
						}
						goto l17
					l16:
						position, tokenIndex = position16, tokenIndex16
					}
				l17:
					if !_rules[ruleDefinitionBody]() {
						goto l6
					}
					if !_rules[ruleRBRK]() {
						goto l6
					}
				}
			l8:
				add(ruleDefinition, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 DefinitionBody <- <(Definition / (LPAR Definition+ RPAR) / (LBRK Definition+ RBRK) / Expression / (LPAR Expression+ RPAR) / ((&('\t' | '\n' | '\r' | ' ' | ';' | '[') (LBRK Expression+ RBRK)) | (&('"' | '#' | '+' | '-' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Literal) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') Identifier)))> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				{
					position20, tokenIndex20 := position, tokenIndex
					if !_rules[ruleDefinition]() {
						goto l21
					}
					goto l20
				l21:
					position, tokenIndex = position20, tokenIndex20
					if !_rules[ruleLPAR]() {
						goto l22
					}
					if !_rules[ruleDefinition]() {
						goto l22
					}
				l23:
					{
						position24, tokenIndex24 := position, tokenIndex
						if !_rules[ruleDefinition]() {
							goto l24
						}
						goto l23
					l24:
						position, tokenIndex = position24, tokenIndex24
					}
					if !_rules[ruleRPAR]() {
						goto l22
					}
					goto l20
				l22:
					position, tokenIndex = position20, tokenIndex20
					if !_rules[ruleLBRK]() {
						goto l25
					}
					if !_rules[ruleDefinition]() {
						goto l25
					}
				l26:
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleDefinition]() {
							goto l27
						}
						goto l26
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					if !_rules[ruleRBRK]() {
						goto l25
					}
					goto l20
				l25:
					position, tokenIndex = position20, tokenIndex20
					if !_rules[ruleExpression]() {
						goto l28
					}
					goto l20
				l28:
					position, tokenIndex = position20, tokenIndex20
					if !_rules[ruleLPAR]() {
						goto l29
					}
					if !_rules[ruleExpression]() {
						goto l29
					}
				l30:
					{
						position31, tokenIndex31 := position, tokenIndex
						if !_rules[ruleExpression]() {
							goto l31
						}
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !_rules[ruleRPAR]() {
						goto l29
					}
					goto l20
				l29:
					position, tokenIndex = position20, tokenIndex20
					{
						switch buffer[position] {
						case '\t', '\n', '\r', ' ', ';', '[':
							if !_rules[ruleLBRK]() {
								goto l18
							}
							if !_rules[ruleExpression]() {
								goto l18
							}
						l33:
							{
								position34, tokenIndex34 := position, tokenIndex
								if !_rules[ruleExpression]() {
									goto l34
								}
								goto l33
							l34:
								position, tokenIndex = position34, tokenIndex34
							}
							if !_rules[ruleRBRK]() {
								goto l18
							}
						case '"', '#', '+', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if !_rules[ruleLiteral]() {
								goto l18
							}
						default:
							if !_rules[ruleIdentifier]() {
								goto l18
							}
						}
					}

				}
			l20:
				add(ruleDefinitionBody, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 3 Option <- <('#' ':' Identifier (Literal / Identifier) Spacing)> */
		nil,
		/* 4 OptionList <- <Option+> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				{
					position40 := position
					if buffer[position] != rune('#') {
						goto l36
					}
					position++
					if buffer[position] != rune(':') {
						goto l36
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l36
					}
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[ruleLiteral]() {
							goto l42
						}
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						if !_rules[ruleIdentifier]() {
							goto l36
						}
					}
				l41:
					if !_rules[ruleSpacing]() {
						goto l36
					}
					add(ruleOption, position40)
				}
			l38:
				{
					position39, tokenIndex39 := position, tokenIndex
					{
						position43 := position
						if buffer[position] != rune('#') {
							goto l39
						}
						position++
						if buffer[position] != rune(':') {
							goto l39
						}
						position++
						if !_rules[ruleIdentifier]() {
							goto l39
						}
						{
							position44, tokenIndex44 := position, tokenIndex
							if !_rules[ruleLiteral]() {
								goto l45
							}
							goto l44
						l45:
							position, tokenIndex = position44, tokenIndex44
							if !_rules[ruleIdentifier]() {
								goto l39
							}
						}
					l44:
						if !_rules[ruleSpacing]() {
							goto l39
						}
						add(ruleOption, position43)
					}
					goto l38
				l39:
					position, tokenIndex = position39, tokenIndex39
				}
				add(ruleOptionList, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 5 Expression <- <((LPAR Operator Operand* RPAR) / (LBRK Operator Operand* RBRK))> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position48, tokenIndex48 := position, tokenIndex
					if !_rules[ruleLPAR]() {
						goto l49
					}
					if !_rules[ruleOperator]() {
						goto l49
					}
				l50:
					{
						position51, tokenIndex51 := position, tokenIndex
						if !_rules[ruleOperand]() {
							goto l51
						}
						goto l50
					l51:
						position, tokenIndex = position51, tokenIndex51
					}
					if !_rules[ruleRPAR]() {
						goto l49
					}
					goto l48
				l49:
					position, tokenIndex = position48, tokenIndex48
					if !_rules[ruleLBRK]() {
						goto l46
					}
					if !_rules[ruleOperator]() {
						goto l46
					}
				l52:
					{
						position53, tokenIndex53 := position, tokenIndex
						if !_rules[ruleOperand]() {
							goto l53
						}
						goto l52
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
					if !_rules[ruleRBRK]() {
						goto l46
					}
				}
			l48:
				add(ruleExpression, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 6 Operator <- <(Identifier Spacing)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleIdentifier]() {
					goto l54
				}
				if !_rules[ruleSpacing]() {
					goto l54
				}
				add(ruleOperator, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 7 Operand <- <(((&('\t' | '\n' | '\r' | ' ' | '(' | ';' | '[') Expression) | (&('"' | '#' | '+' | '-' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Literal) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '_' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') Identifier)) Spacing)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				{
					switch buffer[position] {
					case '\t', '\n', '\r', ' ', '(', ';', '[':
						if !_rules[ruleExpression]() {
							goto l56
						}
					case '"', '#', '+', '-', '.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if !_rules[ruleLiteral]() {
							goto l56
						}
					default:
						if !_rules[ruleIdentifier]() {
							goto l56
						}
					}
				}

				if !_rules[ruleSpacing]() {
					goto l56
				}
				add(ruleOperand, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 8 Spacing <- <(((&('\n') '\n') | (&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))+ / (';' (!('\r' / '\n') .)* ('\r' / '\n')))*> */
		func() bool {
			{
				position60 := position
			l61:
				{
					position62, tokenIndex62 := position, tokenIndex
					{
						position63, tokenIndex63 := position, tokenIndex
						{
							switch buffer[position] {
							case '\n':
								if buffer[position] != rune('\n') {
									goto l64
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l64
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l64
								}
								position++
							default:
								if buffer[position] != rune(' ') {
									goto l64
								}
								position++
							}
						}

					l65:
						{
							position66, tokenIndex66 := position, tokenIndex
							{
								switch buffer[position] {
								case '\n':
									if buffer[position] != rune('\n') {
										goto l66
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l66
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l66
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l66
									}
									position++
								}
							}

							goto l65
						l66:
							position, tokenIndex = position66, tokenIndex66
						}
						goto l63
					l64:
						position, tokenIndex = position63, tokenIndex63
						if buffer[position] != rune(';') {
							goto l62
						}
						position++
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							{
								position71, tokenIndex71 := position, tokenIndex
								{
									position72, tokenIndex72 := position, tokenIndex
									if buffer[position] != rune('\r') {
										goto l73
									}
									position++
									goto l72
								l73:
									position, tokenIndex = position72, tokenIndex72
									if buffer[position] != rune('\n') {
										goto l71
									}
									position++
								}
							l72:
								goto l70
							l71:
								position, tokenIndex = position71, tokenIndex71
							}
							if !matchDot() {
								goto l70
							}
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						{
							position74, tokenIndex74 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l75
							}
							position++
							goto l74
						l75:
							position, tokenIndex = position74, tokenIndex74
							if buffer[position] != rune('\n') {
								goto l62
							}
							position++
						}
					l74:
					}
				l63:
					goto l61
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
				add(ruleSpacing, position60)
			}
			return true
		},
		/* 9 Identifier <- <(!Keyword Letter LetterOrDigit* Spacing?)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				{
					position78, tokenIndex78 := position, tokenIndex
					{
						position79 := position
						{
							position80, tokenIndex80 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l81
							}
							position++
							if buffer[position] != rune('e') {
								goto l81
							}
							position++
							if buffer[position] != rune('f') {
								goto l81
							}
							position++
							if buffer[position] != rune('i') {
								goto l81
							}
							position++
							if buffer[position] != rune('n') {
								goto l81
							}
							position++
							if buffer[position] != rune('e') {
								goto l81
							}
							position++
							if buffer[position] != rune('-') {
								goto l81
							}
							position++
							if buffer[position] != rune('p') {
								goto l81
							}
							position++
							if buffer[position] != rune('r') {
								goto l81
							}
							position++
							if buffer[position] != rune('d') {
								goto l81
							}
							position++
							if buffer[position] != rune('t') {
								goto l81
							}
							position++
							goto l80
						l81:
							position, tokenIndex = position80, tokenIndex80
							if buffer[position] != rune('d') {
								goto l82
							}
							position++
							if buffer[position] != rune('e') {
								goto l82
							}
							position++
							if buffer[position] != rune('f') {
								goto l82
							}
							position++
							if buffer[position] != rune('i') {
								goto l82
							}
							position++
							if buffer[position] != rune('n') {
								goto l82
							}
							position++
							if buffer[position] != rune('e') {
								goto l82
							}
							position++
							if buffer[position] != rune('-') {
								goto l82
							}
							position++
							if buffer[position] != rune('l') {
								goto l82
							}
							position++
							if buffer[position] != rune('h') {
								goto l82
							}
							position++
							if buffer[position] != rune('s') {
								goto l82
							}
							position++
							goto l80
						l82:
							position, tokenIndex = position80, tokenIndex80
							if buffer[position] != rune('d') {
								goto l83
							}
							position++
							if buffer[position] != rune('e') {
								goto l83
							}
							position++
							if buffer[position] != rune('f') {
								goto l83
							}
							position++
							if buffer[position] != rune('i') {
								goto l83
							}
							position++
							if buffer[position] != rune('n') {
								goto l83
							}
							position++
							if buffer[position] != rune('e') {
								goto l83
							}
							position++
							if buffer[position] != rune('-') {
								goto l83
							}
							position++
							if buffer[position] != rune('r') {
								goto l83
							}
							position++
							if buffer[position] != rune('h') {
								goto l83
							}
							position++
							if buffer[position] != rune('s') {
								goto l83
							}
							position++
							goto l80
						l83:
							position, tokenIndex = position80, tokenIndex80
							if buffer[position] != rune('r') {
								goto l84
							}
							position++
							if buffer[position] != rune('u') {
								goto l84
							}
							position++
							if buffer[position] != rune('l') {
								goto l84
							}
							position++
							if buffer[position] != rune('e') {
								goto l84
							}
							position++
							goto l80
						l84:
							position, tokenIndex = position80, tokenIndex80
							if buffer[position] != rune('d') {
								goto l78
							}
							position++
							if buffer[position] != rune('e') {
								goto l78
							}
							position++
							if buffer[position] != rune('f') {
								goto l78
							}
							position++
							if buffer[position] != rune('i') {
								goto l78
							}
							position++
							if buffer[position] != rune('n') {
								goto l78
							}
							position++
							if buffer[position] != rune('e') {
								goto l78
							}
							position++
						}
					l80:
						{
							position85, tokenIndex85 := position, tokenIndex
							if !_rules[ruleLetterOrDigit]() {
								goto l85
							}
							goto l78
						l85:
							position, tokenIndex = position85, tokenIndex85
						}
						add(ruleKeyword, position79)
					}
					goto l76
				l78:
					position, tokenIndex = position78, tokenIndex78
				}
				{
					position86 := position
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l76
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l76
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l76
							}
							position++
						}
					}

					add(ruleLetter, position86)
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				{
					position90, tokenIndex90 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l90
					}
					goto l91
				l90:
					position, tokenIndex = position90, tokenIndex90
				}
			l91:
				add(ruleIdentifier, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 10 Literal <- <(FloatLiteral / ((&('#') BoolLiteral) | (&('"') StringLiteral) | (&('-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IntegerLiteral)))> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					{
						position96 := position
						{
							position97, tokenIndex97 := position, tokenIndex
							{
								position99, tokenIndex99 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l100
								}
								position++
								goto l99
							l100:
								position, tokenIndex = position99, tokenIndex99
								if buffer[position] != rune('-') {
									goto l97
								}
								position++
							}
						l99:
							goto l98
						l97:
							position, tokenIndex = position97, tokenIndex97
						}
					l98:
						{
							position101, tokenIndex101 := position, tokenIndex
							if !_rules[ruleDigits]() {
								goto l102
							}
							if buffer[position] != rune('.') {
								goto l102
							}
							position++
							{
								position103, tokenIndex103 := position, tokenIndex
								if !_rules[ruleDigits]() {
									goto l103
								}
								goto l104
							l103:
								position, tokenIndex = position103, tokenIndex103
							}
						l104:
							{
								position105, tokenIndex105 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l105
								}
								goto l106
							l105:
								position, tokenIndex = position105, tokenIndex105
							}
						l106:
							goto l101
						l102:
							position, tokenIndex = position101, tokenIndex101
							if !_rules[ruleDigits]() {
								goto l107
							}
							if !_rules[ruleExponent]() {
								goto l107
							}
							goto l101
						l107:
							position, tokenIndex = position101, tokenIndex101
							if buffer[position] != rune('.') {
								goto l95
							}
							position++
							if !_rules[ruleDigits]() {
								goto l95
							}
							{
								position108, tokenIndex108 := position, tokenIndex
								if !_rules[ruleExponent]() {
									goto l108
								}
								goto l109
							l108:
								position, tokenIndex = position108, tokenIndex108
							}
						l109:
						}
					l101:
						add(ruleFloatLiteral, position96)
					}
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					{
						switch buffer[position] {
						case '#':
							{
								position111 := position
								{
									position112, tokenIndex112 := position, tokenIndex
									if buffer[position] != rune('#') {
										goto l113
									}
									position++
									if buffer[position] != rune('f') {
										goto l113
									}
									position++
									goto l112
								l113:
									position, tokenIndex = position112, tokenIndex112
									if buffer[position] != rune('#') {
										goto l92
									}
									position++
									if buffer[position] != rune('t') {
										goto l92
									}
									position++
								}
							l112:
								{
									position114, tokenIndex114 := position, tokenIndex
									if !_rules[ruleLetterOrDigit]() {
										goto l114
									}
									goto l92
								l114:
									position, tokenIndex = position114, tokenIndex114
								}
								add(ruleBoolLiteral, position111)
							}
						case '"':
							{
								position115 := position
								if buffer[position] != rune('"') {
									goto l92
								}
								position++
							l116:
								{
									position117, tokenIndex117 := position, tokenIndex
									{
										position118 := position
										{
											position119, tokenIndex119 := position, tokenIndex
											{
												position121 := position
												if buffer[position] != rune('\\') {
													goto l120
												}
												position++
												{
													switch buffer[position] {
													case '\\':
														if buffer[position] != rune('\\') {
															goto l120
														}
														position++
													case '\'':
														if buffer[position] != rune('\'') {
															goto l120
														}
														position++
													case '"':
														if buffer[position] != rune('"') {
															goto l120
														}
														position++
													case 'r':
														if buffer[position] != rune('r') {
															goto l120
														}
														position++
													case 'f':
														if buffer[position] != rune('f') {
															goto l120
														}
														position++
													case 'n':
														if buffer[position] != rune('n') {
															goto l120
														}
														position++
													case 't':
														if buffer[position] != rune('t') {
															goto l120
														}
														position++
													default:
														if buffer[position] != rune('b') {
															goto l120
														}
														position++
													}
												}

												add(ruleEscape, position121)
											}
											goto l119
										l120:
											position, tokenIndex = position119, tokenIndex119
											{
												position123, tokenIndex123 := position, tokenIndex
												{
													switch buffer[position] {
													case '\\':
														if buffer[position] != rune('\\') {
															goto l123
														}
														position++
													case '\n':
														if buffer[position] != rune('\n') {
															goto l123
														}
														position++
													default:
														if buffer[position] != rune('"') {
															goto l123
														}
														position++
													}
												}

												goto l117
											l123:
												position, tokenIndex = position123, tokenIndex123
											}
											if !matchDot() {
												goto l117
											}
										}
									l119:
										add(ruleStringChar, position118)
									}
									goto l116
								l117:
									position, tokenIndex = position117, tokenIndex117
								}
								if buffer[position] != rune('"') {
									goto l92
								}
								position++
								add(ruleStringLiteral, position115)
							}
						default:
							{
								position125 := position
								{
									position126, tokenIndex126 := position, tokenIndex
									if buffer[position] != rune('-') {
										goto l126
									}
									position++
									goto l127
								l126:
									position, tokenIndex = position126, tokenIndex126
								}
							l127:
								{
									position128 := position
									{
										position129, tokenIndex129 := position, tokenIndex
										if buffer[position] != rune('0') {
											goto l130
										}
										position++
										goto l129
									l130:
										position, tokenIndex = position129, tokenIndex129
										if c := buffer[position]; c < rune('1') || c > rune('9') {
											goto l92
										}
										position++
									l131:
										{
											position132, tokenIndex132 := position, tokenIndex
										l133:
											{
												position134, tokenIndex134 := position, tokenIndex
												if buffer[position] != rune('_') {
													goto l134
												}
												position++
												goto l133
											l134:
												position, tokenIndex = position134, tokenIndex134
											}
											if c := buffer[position]; c < rune('0') || c > rune('9') {
												goto l132
											}
											position++
											goto l131
										l132:
											position, tokenIndex = position132, tokenIndex132
										}
									}
								l129:
									add(ruleDecimalNumeral, position128)
								}
								{
									position135, tokenIndex135 := position, tokenIndex
									{
										switch buffer[position] {
										case 'F':
											if buffer[position] != rune('F') {
												goto l135
											}
											position++
										case 'f':
											if buffer[position] != rune('f') {
												goto l135
											}
											position++
										case 'U':
											if buffer[position] != rune('U') {
												goto l135
											}
											position++
										default:
											if buffer[position] != rune('u') {
												goto l135
											}
											position++
										}
									}

									goto l136
								l135:
									position, tokenIndex = position135, tokenIndex135
								}
							l136:
								add(ruleIntegerLiteral, position125)
							}
						}
					}

				}
			l94:
				add(ruleLiteral, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 11 BoolLiteral <- <((('#' 'f') / ('#' 't')) !LetterOrDigit)> */
		nil,
		/* 12 FloatLiteral <- <(('+' / '-')? ((Digits '.' Digits? Exponent?) / (Digits Exponent) / ('.' Digits Exponent?)))> */
		nil,
		/* 13 Exponent <- <(('e' / 'E') ('+' / '-')? Digits)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142, tokenIndex142 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l143
					}
					position++
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if buffer[position] != rune('E') {
						goto l140
					}
					position++
				}
			l142:
				{
					position144, tokenIndex144 := position, tokenIndex
					{
						position146, tokenIndex146 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l147
						}
						position++
						goto l146
					l147:
						position, tokenIndex = position146, tokenIndex146
						if buffer[position] != rune('-') {
							goto l144
						}
						position++
					}
				l146:
					goto l145
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
			l145:
				if !_rules[ruleDigits]() {
					goto l140
				}
				add(ruleExponent, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 14 IntegerLiteral <- <('-'? DecimalNumeral ((&('F') 'F') | (&('f') 'f') | (&('U') 'U') | (&('u') 'u'))?)> */
		nil,
		/* 15 DecimalNumeral <- <('0' / ([1-9] ('_'* [0-9])*))> */
		nil,
		/* 16 StringLiteral <- <('"' StringChar* '"')> */
		nil,
		/* 17 StringChar <- <(Escape / (!((&('\\') '\\') | (&('\n') '\n') | (&('"') '"')) .))> */
		nil,
		/* 18 LetterOrDigit <- <((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l152
						}
						position++
					case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l152
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l152
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l152
						}
						position++
					}
				}

				add(ruleLetterOrDigit, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 19 Letter <- <((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 20 Digits <- <([0-9] ('_'* [0-9])*)> */
		func() bool {
			position156, tokenIndex156 := position, tokenIndex
			{
				position157 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l156
				}
				position++
			l158:
				{
					position159, tokenIndex159 := position, tokenIndex
				l160:
					{
						position161, tokenIndex161 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l161
						}
						position++
						goto l160
					l161:
						position, tokenIndex = position161, tokenIndex161
					}
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l159
					}
					position++
					goto l158
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				add(ruleDigits, position157)
			}
			return true
		l156:
			position, tokenIndex = position156, tokenIndex156
			return false
		},
		/* 21 Escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 22 Keyword <- <((('d' 'e' 'f' 'i' 'n' 'e' '-' 'p' 'r' 'd' 't') / ('d' 'e' 'f' 'i' 'n' 'e' '-' 'l' 'h' 's') / ('d' 'e' 'f' 'i' 'n' 'e' '-' 'r' 'h' 's') / ('r' 'u' 'l' 'e') / ('d' 'e' 'f' 'i' 'n' 'e')) !LetterOrDigit)> */
		nil,
		/* 23 DefType <- <((('d' 'e' 'f' 'i' 'n' 'e' '-' 'p' 'r' 'd' 't') / ('d' 'e' 'f' 'i' 'n' 'e' '-' 'l' 'h' 's') / ('d' 'e' 'f' 'i' 'n' 'e' '-' 'r' 'h' 's') / ('r' 'u' 'l' 'e') / ('d' 'e' 'f' 'i' 'n' 'e')) !LetterOrDigit Spacing)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					position166, tokenIndex166 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l167
					}
					position++
					if buffer[position] != rune('e') {
						goto l167
					}
					position++
					if buffer[position] != rune('f') {
						goto l167
					}
					position++
					if buffer[position] != rune('i') {
						goto l167
					}
					position++
					if buffer[position] != rune('n') {
						goto l167
					}
					position++
					if buffer[position] != rune('e') {
						goto l167
					}
					position++
					if buffer[position] != rune('-') {
						goto l167
					}
					position++
					if buffer[position] != rune('p') {
						goto l167
					}
					position++
					if buffer[position] != rune('r') {
						goto l167
					}
					position++
					if buffer[position] != rune('d') {
						goto l167
					}
					position++
					if buffer[position] != rune('t') {
						goto l167
					}
					position++
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('d') {
						goto l168
					}
					position++
					if buffer[position] != rune('e') {
						goto l168
					}
					position++
					if buffer[position] != rune('f') {
						goto l168
					}
					position++
					if buffer[position] != rune('i') {
						goto l168
					}
					position++
					if buffer[position] != rune('n') {
						goto l168
					}
					position++
					if buffer[position] != rune('e') {
						goto l168
					}
					position++
					if buffer[position] != rune('-') {
						goto l168
					}
					position++
					if buffer[position] != rune('l') {
						goto l168
					}
					position++
					if buffer[position] != rune('h') {
						goto l168
					}
					position++
					if buffer[position] != rune('s') {
						goto l168
					}
					position++
					goto l166
				l168:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('d') {
						goto l169
					}
					position++
					if buffer[position] != rune('e') {
						goto l169
					}
					position++
					if buffer[position] != rune('f') {
						goto l169
					}
					position++
					if buffer[position] != rune('i') {
						goto l169
					}
					position++
					if buffer[position] != rune('n') {
						goto l169
					}
					position++
					if buffer[position] != rune('e') {
						goto l169
					}
					position++
					if buffer[position] != rune('-') {
						goto l169
					}
					position++
					if buffer[position] != rune('r') {
						goto l169
					}
					position++
					if buffer[position] != rune('h') {
						goto l169
					}
					position++
					if buffer[position] != rune('s') {
						goto l169
					}
					position++
					goto l166
				l169:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('r') {
						goto l170
					}
					position++
					if buffer[position] != rune('u') {
						goto l170
					}
					position++
					if buffer[position] != rune('l') {
						goto l170
					}
					position++
					if buffer[position] != rune('e') {
						goto l170
					}
					position++
					goto l166
				l170:
					position, tokenIndex = position166, tokenIndex166
					if buffer[position] != rune('d') {
						goto l164
					}
					position++
					if buffer[position] != rune('e') {
						goto l164
					}
					position++
					if buffer[position] != rune('f') {
						goto l164
					}
					position++
					if buffer[position] != rune('i') {
						goto l164
					}
					position++
					if buffer[position] != rune('n') {
						goto l164
					}
					position++
					if buffer[position] != rune('e') {
						goto l164
					}
					position++
				}
			l166:
				{
					position171, tokenIndex171 := position, tokenIndex
					if !_rules[ruleLetterOrDigit]() {
						goto l171
					}
					goto l164
				l171:
					position, tokenIndex = position171, tokenIndex171
				}
				if !_rules[ruleSpacing]() {
					goto l164
				}
				add(ruleDefType, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 24 LPAR <- <(Spacing '(' Spacing)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if !_rules[ruleSpacing]() {
					goto l172
				}
				if buffer[position] != rune('(') {
					goto l172
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l172
				}
				add(ruleLPAR, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 25 RPAR <- <(Spacing ')' Spacing)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if !_rules[ruleSpacing]() {
					goto l174
				}
				if buffer[position] != rune(')') {
					goto l174
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l174
				}
				add(ruleRPAR, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 26 LBRK <- <(Spacing '[' Spacing)> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if !_rules[ruleSpacing]() {
					goto l176
				}
				if buffer[position] != rune('[') {
					goto l176
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l176
				}
				add(ruleLBRK, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 27 RBRK <- <(Spacing ']' Spacing)> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if !_rules[ruleSpacing]() {
					goto l178
				}
				if buffer[position] != rune(']') {
					goto l178
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l178
				}
				add(ruleRBRK, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 28 EOT <- <!.> */
		nil,
	}
	p.rules = _rules
	return nil
}
